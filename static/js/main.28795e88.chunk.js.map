{"version":3,"sources":["components/SearchBar/Searchbar.styled.jsx","components/SearchBar/SearchBar.jsx","components/ImageGallery/ImageGallery.styled.jsx","components/ImageGalleryItem/ImageGalleryItem.styled.jsx","components/ImageGalleryItem/ImageGalleryItem.jsx","components/ImageGallery/ImageGallery.jsx","components/Modal/Modal.styled.jsx","components/Spinner/Spinner.styled.jsx","components/Spinner/Spinner.jsx","components/Modal/Modal.jsx","components/Button/Button.styled.jsx","components/Button/Button.jsx","components/services/apiService.js","components/App/App.styled.jsx","components/App/App.js","index.js"],"names":["Header","Form","Button","ButtonLabel","Input","SearchBar","state","value","handleInputChange","e","setState","currentTarget","toLowerCase","handleSubmit","preventDefault","trim","toast","error","props","onSubmit","this","onChange","placeholder","Component","List","Item","Image","ImageGalleryItem","loaded","handleImageLoad","previewImage","tags","onImageSelect","src","alt","onClick","onLoad","ImageGallery","images","map","image","id","webformatURL","largeImageURL","Overlay","styled","div","ModalWindow","CloseButton","button","img","LoaderContainer","Spinner","type","color","height","width","modalRoot","document","querySelector","Modal","handleKeyDown","code","console","log","onClose","handleOverlayClick","target","handleImageLoaded","window","addEventListener","removeEventListener","createPortal","size","StyledButton","Pixabay","axios","defaults","baseURL","Api","searchQuery","page","params","get","data","hits","Container","App","selectedImage","status","onModalClose","body","classList","remove","add","onLoadMore","prevState","prevProps","a","getImages","length","Error","scrollTo","top","documentElement","scrollHeight","behavior","pending","resolved","name","autoClose","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.28795e88.chunk.js","sourcesContent":["import styled from \"@emotion/styled/macro\";\r\n\r\nexport const Header = styled.header`\r\n  top: 0;\r\n  left: 0;\r\n  position: sticky;\r\n  z-index: 1000;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  min-height: 64px;\r\n  padding-right: 24px;\r\n  padding-left: 24px;\r\n  padding-top: 12px;\r\n  padding-bottom: 12px;\r\n  color: #fff;\r\n  background-color: #3f51b5;\r\n  box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2),\r\n    0px 4px 5px 0px rgba(0, 0, 0, 0.5), 0px 1px 10px 0px rgba(0, 0, 0, 0.5);\r\n`;\r\n\r\nexport const Form = styled.form`\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n  max-width: 600px;\r\n  background-color: #fff;\r\n  border-radius: 3px;\r\n  overflow: hidden;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  display: inline-block;\r\n  width: 48px;\r\n  height: 48px;\r\n  border: 0;\r\n  background-image: url(\"https://image.flaticon.com/icons/svg/149/149852.svg\");\r\n  background-size: 40%;\r\n  background-repeat: no-repeat;\r\n  background-position: center;\r\n  opacity: 0.6;\r\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\r\n  cursor: pointer;\r\n  outline: none;\r\n  &:hover {\r\n    opacity: 1;\r\n  }\r\n`;\r\n\r\nexport const ButtonLabel = styled.span`\r\n  position: absolute;\r\n  width: 1px;\r\n  height: 1px;\r\n  padding: 0;\r\n  overflow: hidden;\r\n  clip: rect(0, 0, 0, 0);\r\n  white-space: nowrap;\r\n  clip-path: inset(50%);\r\n  border: 0;\r\n`;\r\n\r\nexport const Input = styled.input`\r\n  display: inline-block;\r\n  width: 100%;\r\n  font: inherit;\r\n  font-size: 20px;\r\n  border: none;\r\n  outline: none;\r\n  padding-left: 4px;\r\n  padding-right: 4px;\r\n  &::placeholder {\r\n    font: inherit;\r\n    font-size: 18px;\r\n  }\r\n`;","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { toast } from \"react-toastify\";\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { Header, Form, Button, ButtonLabel, Input } from \"./Searchbar.styled\";\r\n\r\nexport class SearchBar extends Component {\r\n  static propTypes = { onSubmit: PropTypes.func.isRequired };\r\n\r\n// локальный state. храним пока набираем инпут\r\n  state = { value: \"\" };\r\n\r\n// обновляет значение input при каждом изменении\r\n  handleInputChange = (e) => {\r\n    \r\n  this.setState({ value: e.currentTarget.value.toLowerCase() });\r\n  };\r\n  \r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n// нет рендера картинок при пробеле если trim. не отправляем пустую сторку\r\n    if (this.state.value.trim() === '') { \r\n     return toast.error(\"Enter search query\");\r\n    }\r\n// очиста формы сразу после Submit \r\n    this.props.onSubmit(this.state.value);\r\n    this.setState({ value: \"\" });\r\n\r\n  };\r\n\r\n  render() {\r\n    const { value } = this.state;\r\n\r\n    return (\r\n      <Header>\r\n        <Form onSubmit={this.handleSubmit}>\r\n          <Button>\r\n            <ButtonLabel>Search</ButtonLabel>\r\n          </Button>\r\n          <Input\r\n            value={value} // устанавливает значение input взависимости от state\r\n            onChange={this.handleInputChange} // тут привязываем метод который обновляет значение stat\r\n            placeholder=\"Search images\"\r\n          />\r\n        </Form>\r\n      </Header>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n","import styled from \"@emotion/styled/macro\";\r\n\r\nexport const List = styled.ul`\r\n  display: grid;\r\n  max-width: calc(100vw - 48px);\r\n  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));\r\n  grid-gap: 30px;\r\n  margin-top: 0;\r\n  margin-bottom: 0;\r\n  padding: 30px 60px;\r\n  list-style: none;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n`;","import styled from \"@emotion/styled/macro\";\r\n\r\nexport const Item = styled.li`\r\n  border-radius: 8px;\r\n  overflow: hidden;\r\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\r\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\r\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1),\r\n    box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1);\r\n  &:hover {\r\n    transform: scale(1.06);\r\n    cursor: zoom-in;\r\n    box-shadow: rgba(0, 0, 0, 0.5) 0 0 10px 5px;\r\n  }\r\n`;\r\n\r\nexport const Image = styled.img`\r\n  width: 100%;\r\n  height: 260px;\r\n  object-fit: cover;\r\n`;","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Item, Image } from \"./ImageGalleryItem.styled\";\r\n// import pendingImage from \"../../images/pendingImage.png\";\r\n\r\nexport class ImageGalleryItem extends Component {\r\n  static propTypes = {\r\n    previewImage: PropTypes.string.isRequired,\r\n    tags: PropTypes.string.isRequired,\r\n    onImageSelect: PropTypes.func.isRequired,\r\n  };\r\n\r\n  state = { loaded: false };\r\n\r\n  handleImageLoad = () => {\r\n    this.setState({ loaded: true });\r\n  };\r\n\r\n  render() {\r\n    // const { loaded } = this.state;\r\n\r\n    const { previewImage, tags, onImageSelect } = this.props;\r\n\r\n    return (\r\n      <Item>\r\n        <Image\r\n          src={previewImage}\r\n          // src={loaded ? previewImage : pendingImage}\r\n          alt={tags}\r\n          onClick={onImageSelect}\r\n          onLoad={this.handleImageLoad}\r\n        />\r\n      </Item>\r\n    );\r\n  }\r\n}","import PropTypes from \"prop-types\";\r\nimport { List } from \"./ImageGallery.styled\";\r\nimport { ImageGalleryItem } from \"../ImageGalleryItem/ImageGalleryItem\";\r\n\r\nexport const ImageGallery = ({ images, onImageSelect }) => {\r\n  return (\r\n    <List>\r\n      {images.map((image) => {\r\n        const { id, webformatURL, largeImageURL, tags } = image;\r\n\r\n        return (\r\n          <ImageGalleryItem\r\n            key={id}\r\n            previewImage={webformatURL}\r\n            tags={tags}\r\n            onImageSelect={() => {\r\n              onImageSelect(largeImageURL, tags);\r\n            }}\r\n          />\r\n        );\r\n      })}\r\n    </List>\r\n  );\r\n};\r\n\r\nImageGallery.propTypes = {\r\n  images: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.number.isRequired,\r\n      webformatURL: PropTypes.string.isRequired,\r\n      largeImageURL: PropTypes.string.isRequired,\r\n    })\r\n  ).isRequired,\r\n  onImageSelect: PropTypes.func.isRequired,\r\n};","import styled from \"@emotion/styled\";\r\n\r\nexport const Overlay = styled.div`\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100vw;\r\n  height: 100vh;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding-top: 50px;\r\n  padding-bottom: 50px;\r\n  background-color: rgba(0, 0, 0, 0.8);\r\n  overflow-y: scroll;\r\n  z-index: 1200;\r\n  backdrop-filter: blur(10px);\r\n`;\r\n\r\nexport const ModalWindow = styled.div`\r\n  position: relative;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 70vw;\r\n  height: auto;\r\n  margin: auto;\r\n  border-radius: 10px;\r\n  overflow: hidden;\r\n`;\r\n\r\nexport const CloseButton = styled.button`\r\n  position: absolute;\r\n  top: 10px;\r\n  right: 10px;\r\n  padding: 10px;\r\n  border: none;\r\n  cursor: pointer;\r\n  color: #fff;\r\n  background-color: transparent;\r\n  transition: transform 250ms ease-out, color 250ms ease-in-out;\r\n  &:hover {\r\n    transform: scale(1.2);\r\n    color: #3f51b5;\r\n  }\r\n`;\r\nexport const Image = styled.img`\r\n  object-fit: cover;\r\n  /* width: 80vw;\r\n  height: 80vh; */\r\n`;","import styled from \"@emotion/styled/macro\";\r\n\r\nexport const LoaderContainer = styled.div`\r\n  position: fixed;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 100vw;\r\n  height: 100vh;\r\n`;","import Loader from \"react-loader-spinner\";\r\nimport { LoaderContainer } from \"./Spinner.styled\";\r\n\r\nexport const Spinner = () => {\r\n  return (\r\n    <LoaderContainer>\r\n      <Loader type=\"ThreeDots\" color=\"#3f51b5\" height={200} width={200} />\r\n    </LoaderContainer>\r\n  );\r\n};\r\n\r\n\r\n\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { createPortal } from \"react-dom\";\r\nimport { GiCrossMark } from \"react-icons/gi\";\r\nimport { Overlay, ModalWindow, CloseButton, Image } from \"./Modal.styled\";\r\nimport { Spinner } from \"../Spinner/Spinner\";\r\n\r\nconst modalRoot = document.querySelector(\"#modal-root\");\r\n\r\nexport class Modal extends Component {\r\n  static propTypes = {\r\n    image: PropTypes.objectOf(PropTypes.string).isRequired,\r\n    onClose: PropTypes.func.isRequired,\r\n  };\r\n\r\n  state = { loaded: false };\r\n   \r\n  componentDidMount() {\r\n    console.log('Modal componentDidMount');\r\n    window.addEventListener('keydown', this.handleKeyDown);\r\n  }\r\n\r\n  //метод очистки слушателей, таймеры, HTTP-запросов и т д\r\n  componentWillUnmount() {\r\n       console.log('Modal componentWillUnmount');\r\n       window.removeEventListener('keydown', this.handleKeyDown);\r\n  }\r\n\r\n handleKeyDown = e => {\r\n    if (e.code === 'Escape') {\r\n      console.log('Нажали ESC, нужно закрыть модалку');\r\n      this.props.onClose();\r\n    }\r\n  };\r\n   \r\n   handleOverlayClick = e => {\r\n    if (e.currentTarget === e.target) {\r\n      this.props.onClose();\r\n    }\r\n   };\r\n   \r\n   handleImageLoaded = () => {\r\n    this.setState({ loaded: true });\r\n  };\r\n\r\n  render() {\r\n    const { image, onClose } = this.props;\r\n    const { loaded } = this.state;\r\n       return createPortal(\r\n      <Overlay onClick={this.handleOverlayClick}>\r\n        <ModalWindow>\r\n          <Image\r\n            src={image.src}\r\n            alt={image.alt}\r\n            onLoad={this.handleImageLoaded}\r\n          />\r\n          {loaded ? (\r\n            <CloseButton onClick={onClose}>\r\n              <GiCrossMark size=\"30\" />\r\n            </CloseButton>\r\n          ) : (\r\n            <Spinner />\r\n          )}\r\n        </ModalWindow>\r\n      </Overlay>,\r\n      modalRoot\r\n    );\r\n  }\r\n}\r\n\r\n","import styled from \"@emotion/styled\";\r\n\r\nexport const StyledButton = styled.button`\r\n  padding: 8px 16px;\r\n  margin: 0 auto;\r\n  border-radius: 4px;\r\n  background-color: #3f51b5;\r\n  transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\r\n  text-align: center;\r\n  display: inline-block;\r\n  color: #fff;\r\n  border: 0;\r\n  text-decoration: none;\r\n  cursor: pointer;\r\n  font-family: inherit;\r\n  font-size: 18px;\r\n  line-height: 24px;\r\n  font-style: normal;\r\n  font-weight: 500;\r\n  max-width: 180px;\r\n  box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2),\r\n    0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);\r\n  &:hover,\r\n  &:focus {\r\n    background-color: #303f9f;\r\n  }\r\n`;","import PropTypes from \"prop-types\";\r\nimport { StyledButton } from \"./Button.styled\";\r\n\r\nexport const Button = ({ onClick }) => {\r\n  return <StyledButton onClick={onClick}>Load more</StyledButton>;\r\n};\r\n\r\nButton.propTypes = {\r\n  onClick: PropTypes.func.isRequired,\r\n};","import axios from 'axios';\n\nconst Pixabay = {\n  BASE_URL: 'https://pixabay.com/api/',\n  KEY: '21657218-66b7793ee8efd2d7b156dd49c',\n};\n\naxios.defaults.baseURL = Pixabay.BASE_URL;\n\nexport class Api {\n  static async getImages(searchQuery, page) {\n    const params = `?q=${searchQuery}&page=${page}&key=${Pixabay.KEY}&image_type=photo&orientation=horizontal&per_page=12\n        `;\n    const { data } = await axios.get(params);\n\n    return data.hits;\n  }\n}\n","import styled from \"@emotion/styled\";\r\n\r\nexport const Container = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr;\r\n  /* grid-gap: 16px; */\r\n  padding-bottom: 30px;\r\n`;\r\n","import React, { Component } from 'react';\nimport { SearchBar } from '../SearchBar/SearchBar';\nimport { ImageGallery } from '../ImageGallery/ImageGallery';\nimport { Modal } from '../Modal/Modal';\nimport { Button } from '../Button/Button';\nimport { Spinner } from '../Spinner/Spinner';\nimport { ToastContainer } from 'react-toastify';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { Api } from '../services/apiService';\nimport { Container } from './App.styled';\n\nexport class App extends Component {\n  state = {\n    searchQuery: '',\n    page: 1,\n    images: [],\n    selectedImage: null,\n    status: 'idle',\n    error: null,\n  };\n\n  async componentDidUpdate(prevProps, prevState) {\n    const { searchQuery, page } = this.state;\n\n    if (prevState.searchQuery !== searchQuery || prevState.page !== page) {\n      this.setState({ status: 'pending' });\n\n      try {\n        const images = await Api.getImages(searchQuery, page);\n\n        if (!images.length) {\n          throw new Error();\n        }\n\n        this.setState(prevState => ({\n          images: [...prevState.images, ...images],\n          status: 'resolved',\n        }));\n      } catch (error) {\n        this.setState({ error, status: 'rejected' });\n        toast.error('Enter a valid search query');\n      }\n\n      page > 1 &&\n        window.scrollTo({\n          top: document.documentElement.scrollHeight,\n          behavior: 'smooth',\n        });\n    }\n  }\n\n  onSubmit = searchQuery => {\n    if (this.state.searchQuery === searchQuery) {\n      return;\n    } else {\n      this.setState({\n        searchQuery: '',\n        page: 1,\n        images: [],\n      });\n    }\n    this.setState({ searchQuery });\n  };\n\n  //Modal\n  onModalClose = () => {\n    this.setState({ selectedImage: null });\n    document.body.classList.remove('modal-open');\n  };\n\n  onImageSelect = (src, alt) => {\n    this.setState({ selectedImage: { src, alt } });\n    document.body.classList.add('modal-open');\n  };\n\n  //кнопка загрузить еще\n  onLoadMore = () => {\n    this.setState(prevState => ({ page: prevState.page + 1 }));\n  };\n\n  render() {\n    const { images, selectedImage, status } = this.state;\n    const pending = status === 'pending';\n    const resolved = status === 'resolved';\n    return (\n      <Container>\n        <SearchBar onSubmit={this.onSubmit} />\n\n        {images.length > 0 && (\n          <ImageGallery images={images} onImageSelect={this.onImageSelect} />\n        )}\n        {selectedImage && (\n          <Modal image={selectedImage} onClose={this.onModalClose} />\n        )}\n        {pending && <Spinner />}\n        {resolved && images.length >= 12 && (\n          <Button name=\"Load more\" onClick={this.onLoadMore} />\n        )}\n        <ToastContainer autoClose={3000} />\n      </Container>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import smoothscroll from 'smoothscroll-polyfill';\nimport './index.css';\nimport { App } from './components/App/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// smoothscroll.polyfill();\n"],"sourceRoot":""}